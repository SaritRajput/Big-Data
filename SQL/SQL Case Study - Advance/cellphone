-- use PostgreSQL 9.11 and tool pgadmin4
create Database case_study

create schema Cellphones


create table Cellphones.Dim_Customer
(
IdCustomer int primary key,
Customer_name character varying(30) not null,
Email character varying(100) not null,
Phone int not null
)


Create table Cellphones.Dim_Location
(
IdLocation int primary key,
Zipcode int not null,
Country character varying  (20),
State character varying  (30) not null,
City character varying(20) not null
)


Create table Cellphones.Dim_Manufacturer
(
IdManufacturer int primary key,
Manufacturer_Name character varying(20)
)

--drop table Cellphones.Dim_Model
Create table Cellphones.Dim_Model
(
IdModel int primary key,
Model_Name character varying(20) not null,
Unit_Price decimal(11,2) not null,
IdManufacturer int not null
)

--alter table Cellphones.Dim_Model alter column Unit_Price type  decimal(11,2)
select * from  Cellphones.Dim_Model

--drop table Cellphones.Fact_Transaction
Create table Cellphones.Fact_Transaction
(
IdModel int not null,
IdCustomer int not null,
IdLocation int not null,
Date text not null,
Total_Price decimal(11,2) not null,
Quantity int not null
)

---------------------
-- Table: cellphones.dim_date

-- DROP TABLE IF EXISTS cellphones.dim_date;

CREATE TABLE IF NOT EXISTS cellphones.dim_date
(
    date date NOT NULL,
    year integer,
    quarter integer,
    month text COLLATE pg_catalog."default",
    CONSTRAINT dim_date_pkey PRIMARY KEY (date)
)
WITH (
    OIDS = FALSE
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS cellphones.dim_date
    OWNER to postgres;


----------------

-----------------to create function
-- FUNCTION: cellphones.trigger_dim_date()

-- DROP FUNCTION IF EXISTS cellphones.trigger_dim_date();

CREATE OR REPLACE FUNCTION cellphones.trigger_dim_date()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE 

  
    BEGIN
	update Cellphones.Dim_Date set year=extract(year from new.date),
	quarter=extract(quarter from new.date),
	month=extract(month from new.date)
	where date=new.date;
	       RETURN new;

       
    END;
$BODY$;

ALTER FUNCTION cellphones.trigger_dim_date()
    OWNER TO postgres;

------------------------
-- Trigger: trigger_date

-- DROP TRIGGER IF EXISTS trigger_date ON cellphones.dim_date;

CREATE TRIGGER trigger_date
    AFTER INSERT
    ON cellphones.dim_date
    FOR EACH ROW
    EXECUTE PROCEDURE cellphones.trigger_dim_date();
	insert into cellphones.Dim_Date values
('2014-12-23'),
('2015-04-29'),
('2011-03-17'),
('2010-06-08'),
('2016-08-12'),
('2017-11-01'),
('2015-10-31'),
('2012-01-15'),
('2011-02-03'),
('2016-05-18'),
('2017-07-06'),
('2013-09-23'),
('2010-05-27'),
('2009-04-18'),
('2013-03-16'),
('2017-07-29'),
('2011-02-14'),
('2012-07-31'),
('2015-04-15'),
('2011-11-23')


alter table Cellphones.Fact_Transaction add constraint FK_customerid
Foreign key (IdCustomer) references Cellphones.Dim_Customer (IdCustomer)

alter table Cellphones.Fact_Transaction add constraint FK_locationid
Foreign key (IdLocation) references Cellphones.Dim_Location (IdLocation)

alter table Cellphones.Fact_Transaction add constraint FK_modelid
Foreign key (IdModel) references Cellphones.Dim_Model (IdModel)

alter table Cellphones.Fact_Transaction add constraint FK_date
Foreign key (Date) references Cellphones.Dim_Date (Date)

alter table Cellphones.Dim_Model add constraint FK_manufacturerid
Foreign key (IdManufacturer) references Cellphones.Dim_Manufacturer (IdManufacturer)

alter table Cellphones.Dim_Customer
add constraint U_Email
unique (Email)

alter table Cellphones.Dim_Location
add constraint U_Zipcode
unique (ZipCode)




insert into Cellphones.Dim_Location values
(1,10001,'US','New York','New York City'),
(2,10002,'US','New Jersey','Trenton'),
(3,10003,'US','Washington','Olympia'),
(4,10004,'US','Oregon','Salem'),
(5,10005,'US','California','Sacramento'),
(6,10006,'US','Idaho','Boise'),
(7,10007,'US','Nevada','Carson City'),
(8,10008,'US','Arizona','Pheonix'),
(9,10009,'US','Utah','Salt Lake City'),
(10,10010,'US','Texas','Austin'),
(11,10011,'US','Colorado','Denver'),
(12,10012,'US','Minnesota','St Paul'),
(13,10013,'US','Illinois','Chicago'),
(14,10014,'US','Massachusetts','Boston'),
(15,10015,'US','Florida','Miami')

insert into Cellphones.Dim_Customer values
(1,'Aron','aron@gmail.com',35245),
(2,'Blake','blake@ymail.com',32489),
(3,'Chelsey','chelsey@aol.com',34373),
(4,'Dave','dave@gmail.com',29382),
(5,'Ellie','elly@hotmail.com',38439),
(6,'Fred','fs1@ymail.com',29483),
(7,'Gru','gru@aol.com',17281),
(8,'Howard','hh@gmail.com',25024),
(9,'Iris','Iris@ymail.com',33563),
(10,'Jake','jakeh@aol.com',23423),
(11,'Kim','kim@ymail.com',23849),
(12,'Lowel','lm@gmail.com',89562),
(13,'Mason','mason@hotmail.com',17745),
(14,'Nicky','nicky@ymail.com',12459),
(15,'Oliver','ollie@gmail.com',35235)


select * from Cellphones.Dim_Customer


insert into Cellphones.Dim_Manufacturer values
(1,'Apple'),
(2,'Nokia'),
(3,'Samsung'),
(4,'Mi'),
(5,'Motorola')

insert into Cellphones.Dim_Model values
(101,'Iphone 7 32GB',400,1),
(102,'Iphone 7 128GB',500,1),
(103,'Iphone 7S 32GB',500,1),
(104,'Iphone 7S 128GB',600,1),
(105,'Iphone 7S 256GB',700,1),
(106,'Iphone 8 32GB',400,1),
(107,'Iphone 8 128GB',500,1),
(108,'Iphone 8S 32GB',500,1),
(109,'Iphone 8S 128GB',600,1),
(110,'Iphone 8S 256GB',700,1),
(111,'Nokia X6',200,2),
(112,'Nokia X8',350,2),
(113,'Samsung S8 32GB',300,3),
(114,'Samsung S8 64GB',350,3),
(115,'Samsung S8 128GB',450,3),
(116,'Mi 5',100,4),
(117,'Mi 8',200,4),
(118,'Mi 6',175,4),
(119,'Moto Z',500,5),
(120,'Moto G5',350,5)


insert into Cellphones.Fact_Transaction values
(102,13,9,'2009-04-18',800,1),
(108,4,2,'2012-01-15',1500,4),
(112,9,10,'2011-11-23',1100,3),
(116,11,4,'2012-01-15',700,2),
(101,2,6,'8/12/2016-08-12',2000,5),
(115,15,8,'5/27/2010-05-27',400,1),
(115,6,1,'3/16/2013-03-16',1300,4),
(120,8,12,'7/29/2017-07-29',900,2),
(109,3,14,'11/1/2017-01-11',1800,5),
(117,10,15,'12/23/2014-12-23',1200,4),
(104,6,14,'4/15/2015-04-15',500,1),
(115,3,8,'2/14/2011-02-14',700,1),
(101,13,6,'7/6/2017-07-06',1000,3),
(114,5,11,'6/8/2010-06-08',400,1),
(110,12,15,'5/18/2016-018',1400,3),
(107,6,13,'10/31/2015-',800,2),
(111,15,2,'9/23/2013',3000,5),
(110,12,3,'3/17/2011',1150,4),
(118,10,3,'8/12/2016',500,1),
(113,4,5,'7/31/2012',450,1),
(114,9,9,'5/27/2010',2300,5),
(119,13,3,'2/3/2011',230,1),
(113,6,8,'4/29/2015',350,1),
(115,2,8,'2/3/2011',3400,6),
(117,9,5,'4/18/2009',1500,3),
(103,13,10,'10/31/2015',1300,2),
(113,11,7,'3/16/2013',400,1),
(120,6,2,'12/23/2014',1200,3),
(112,14,10,'9/23/2013',1450,4),
(118,9,15,'2/3/2011',350,1)

----to change data type and date format----
update Cellphones.Fact_Transaction values set Date=to_date(Date,'mm/dd/yyyy') where Date=Date

alter table Cellphones.Fact_Transaction alter column Date type date
using Date::date
select * from Cellphones.Fact_Transaction

-

---------------------------------------
select * from cellphones.dim_date 
select * from cellphones.dim_customer
select * from cellphones.dim_location order by state 
select * from cellphones.dim_manufacturer
select * from cellphones.dim_model
select * from cellphones.fact_transaction

Questions: Write queries to find out the following:

1.	List all the states in which we have customers who have bought cellphones 
	from 2005 till today.
	
select state,customer_name from cellphones.fact_transaction 
join cellphones.dim_customer using(idcustomer)
join cellphones.dim_location using(idlocation)
join cellphones.dim_date using(date)
where year between 2005 and extract(year from current_date)


2) What state in the US is buying more 'Samsung' cell phones?

select dl.state,ft.quantity from cellphones.fact_transaction ft
join cellphones.dim_location dl on dl.idlocation=ft.idlocation
join cellphones.dim_model dm on dm.idmodel=ft.idmodel
join cellphones.dim_manufacturer dn on dn.idmanufacturer=dm.idmanufacturer
where dl.country='US' and dn.manufacturer_name='Samsung'
group by dl.state,ft.quantity  having count(ft.quantity)>0
order by ft.quantity desc  limit 1

3) Show the number of transactions for each model per zip code per state

select zipcode,state,sum(quantity) as sale_txn  from cellphones.fact_transaction
join cellphones.dim_location using(idlocation)
group by zipcode,state
order by zipcode asc

4) Show the cheapest cellphone

select manufacturer_name, model_name, unit_price  as price from cellphones.dim_model
join cellphones.dim_manufacturer using(idmanufacturer)
where unit_price = (select min(unit_price) from cellphones.dim_model)

5) Find out the average price for each model in the top5 manufacturers in 
	terms of sales quantity and order by average price.


select model_name,quantity,avg(total_price)::numeric(11,2) as avg_sale_price from cellphones.fact_transaction
join cellphones.dim_model using(idmodel)
group by model_name,quantity 
order by avg_sale_price limit 5

6) List the names of the customers and the average amount spent in 2009, 
	where the average is higher than 500
	
select customer_name,avg_price from (
select customer_name,avg(total_price)::numeric(11,2) as avg_price 
from cellphones.fact_transaction
join cellphones.dim_customer using(idcustomer)
join cellphones.dim_date using(date)
where year=2009 
group by customer_name
)a
where avg_price>500


7)	List if there is any model that was in the top 5 in terms of quantity, 
	simultaneously in 2008, 2009 and 2010

select model_name,quantity
from cellphones.fact_transaction
join cellphones.dim_model using(idmodel)
join cellphones.dim_date using(date)
where year in(2008,2009,2010) 
	
	group by model_name,quantity
	order by quantity desc
	
8)	Show the manufacturer with the 2nd top sales in the year of 2009 and the 
	manufacturer with the 2nd top sales in the year of 2010.


select  manufacturer_name,(case when year=2009 then quantity end) as sale_2009,
(case when year=2010 then quantity end) as sale_2010
from cellphones.fact_transaction
join cellphones.dim_model using(idmodel)
join cellphones.dim_manufacturer using(idmanufacturer)
join cellphones.dim_date using(date)
where year in(2009,2010) 
	
	group by manufacturer_name,year,quantity
	order by quantity desc 

9)	Show the manufacturers that sold cellphone in 2010 but didn’t in 2009.

select  manufacturer_name,quantity,year
from cellphones.fact_transaction
join cellphones.dim_model using(idmodel)
join cellphones.dim_manufacturer using(idmanufacturer)
join cellphones.dim_date using(date)
where  year  =2010
	
	group by manufacturer_name,quantity ,year
	
	or


select  manufacturer_name,quantity,year
from cellphones.fact_transaction
join cellphones.dim_model using(idmodel)
join cellphones.dim_manufacturer using(idmanufacturer)
join cellphones.dim_date using(date)
where year=2010
	
	group by manufacturer_name,quantity ,year
	
	except
	
	select  manufacturer_name,quantity,year
from cellphones.fact_transaction
join cellphones.dim_model using(idmodel)
join cellphones.dim_manufacturer using(idmanufacturer)
join cellphones.dim_date using(date)
where year=2009
	
	group by manufacturer_name,quantity ,year
	
	
	or
	select  manufacturer_name,quantity,year from (
	
	select  manufacturer_name,quantity,year
from cellphones.fact_transaction
join cellphones.dim_model using(idmodel)
join cellphones.dim_manufacturer using(idmanufacturer)
join cellphones.dim_date using(date)
where  year  in (select year from cellphones.fact_transaction 
join cellphones.dim_date using(date) where year<>2009) 
	
	group by manufacturer_name,quantity ,year
) a
where a.year=2010



10)	Find top 100 customers and their average spend, average quantity by each year.
	Also find the percentage of change in their spend.

select year, customer_name,avg(total_price)::numeric(11,2)as avg_spend,avg(quantity)::numeric(11,2) as avg_qty
,100-(total_price/sum(total_price)*100)::numeric(11,2) as change_percentage
from cellphones.fact_transaction
join cellphones.dim_customer using(idcustomer)
join cellphones.dim_date using(date)

group by customer_name,total_price,year order by year,avg_spend limit 100



